{"version":3,"sources":["assets/venue_location_icon.svg","assets/red_marker.png","Datastore.js","ApiGateway.js","components/VenueLocationIcon.js","components/RedMarker.js","components/MapView.js","components/CaseRegistration.js","components/Menu.js","components/DropDown.js","components/MapFilter.js","components/ContextMenu.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","this","_data","key","value","Object","freeze","ApiGateway","endpoint","request","axios","get","headers","res","data","objekter","console","log","metadata","returnert","neste","href","concat","VenueLocationIcon","L","icon","iconUrl","require","iconRetinaUrl","iconAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","className","RedMarker","MapView","props","state","zoom","contextMenu","handleClick","bind","Map","center","currentLocation","maxZoom","onclick","TileLayer","url","attribution","drawIssueMarkers","issues","spiderfyOnMaxZoom","disableClusteringAtZoom","filters","length","drawMapObjects","map","drawRoads","roads","issueMarkers","item","index","Marker","position","geometry","coordinates","Popup","properties","name","date","objects","includes","type","id","geoJSON","parse","geometri","wkt","point","getIcon","onClick","handleMarkerClick","latLngList","Array","from","coords","slice","Polyline","color","positions","Polygon","err","79","83","87","event","Component","CaseRegistration","latitude","lat","longitude","lng","handleChange","handleSubmit","show","onSubmit","onChange","target","setState","newIssue","handleRegistration","preventDefault","Menu","mainMenu","nextProps","caseRegistration","prevstate","latlng","DropDown","listOpen","headerTitle","title","list","selected","prevState","filter","addFilter","removeFilter","i","toggleList","nummer","navn","MapFilter","expanded","height","width","municipalities","roadObjects","toggleWindow","handleFilters","style","ContextMenu","left","details","x","top","y","Container","swiping","handleContextClick","onMouseDown","onMouseMove","issueRegistration","menu","origin","originalEvent","classList","contains","pageX","pageY","testRoadSelect","App","nvdbEndpoint","filterOnRoad","nvdb","getUserLocation","navigator","geolocation","getCurrentPosition","getIssues","testApiSkriv","polygon","result","forEach","radius","verts","headings","low","step","Math","PI","push","points","heading","asin","sin","cos","promises","roadId","element","a","apiCall","Promise","all","then","values","apply","poly","getPolygonString","getCircle","post","response","status","Error","veglenkesekvens","veglenkesekvensid","value2","veglenker","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4edd3a63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/venue_location_icon.bd6f36a3.svg\";","module.exports = __webpack_public_path__ + \"static/media/red_marker.33539eeb.png\";","/**\r\n * Globally accessible data\r\n * Not in use yet\r\n */ \r\nclass Datastore {\r\n    constructor(){\r\n      this._data = {};\r\n    }\r\n  \r\n    add(key, value){\r\n      this._data[key] = value;\r\n    }\r\n  \r\n    get(key){\r\n      if(key in this._data){\r\n        return this._data[key];\r\n      } else {\r\n        return [];\r\n      }\r\n      \r\n    }\r\n  }\r\n  \r\n  const instance = new Datastore();\r\n  Object.freeze(instance);\r\n  \r\n  export default instance;","import axios from 'axios';\r\nimport Datastore from './Datastore';\r\n\r\n/**\r\n * Responsible for sending out api calls and storing responses\r\n */\r\nexport default class ApiGateway {\r\n    constructor(endpoint){\r\n        this.endpoint = endpoint;\r\n    }\r\n\r\n    async apiCall(request){\r\n      let res = await axios.get(this.endpoint + request, {headers: {'Accept': 'application/vnd.vegvesen.nvdb-v3-rev1+json'}});\r\n  \r\n      let data = res.data.objekter;\r\n      console.log(res)\r\n  \r\n      while (res.data.metadata.returnert === 1000) {\r\n        res = await axios.get(res.data.metadata.neste.href, {headers: {'Accept': 'application/vnd.vegvesen.nvdb-v3-rev1+json'}});\r\n        data = data.concat(res.data.objekter);\r\n      }\r\n      return data;\r\n    }\r\n}","import L from 'leaflet';\r\n\r\nexport const VenueLocationIcon = L.icon({\r\n  iconUrl: require('../assets/venue_location_icon.svg'),\r\n  iconRetinaUrl: require('../assets/venue_location_icon.svg'),\r\n  iconAnchor: null,\r\n  shadowUrl: null,\r\n  shadowSize: null,\r\n  shadowAnchor: null,\r\n  iconSize: [35, 35],\r\n  className: 'leaflet-venue-icon'\r\n});\r\n","import L from 'leaflet';\r\n\r\nexport const RedMarker = L.icon({\r\n  iconUrl: require('../assets/red_marker.png'),\r\n  iconRetinaUrl: require('../assets/red_marker.png'),\r\n  iconAnchor: null,\r\n  shadowUrl: null,\r\n  shadowSize: null,\r\n  shadowAnchor: null,\r\n  iconSize: [35, 35],\r\n  className: 'leaflet-venue-icon'\r\n});\r\n","import React, { Component } from 'react';\r\nimport { Map, TileLayer, Marker, Popup, Polyline, Polygon, GeoJSON } from 'react-leaflet';\r\nimport {VenueLocationIcon} from './VenueLocationIcon';\r\nimport {RedMarker} from './RedMarker';\r\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'react-leaflet-markercluster/dist/styles.min.css';\r\n\r\n/**\r\n * props:\r\n * data: map, roads, issues, filters\r\n * currentLocation\r\n * onClick\r\n */\r\nclass MapView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      zoom: 15,\r\n      contextMenu: false,\r\n    }\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Map \r\n        center={this.props.currentLocation} \r\n        zoom={this.state.zoom} maxZoom={19}\r\n        onclick={this.handleClick}\r\n      >\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n          />\r\n\r\n          {this.drawIssueMarkers(this.props.issues)}\r\n\r\n          <MarkerClusterGroup spiderfyOnMaxZoom={false} disableClusteringAtZoom={18}>\r\n           {this.props.filters.length !== 0 && this.drawMapObjects(this.props.map)}\r\n           {this.drawRoads(this.props.roads)}\r\n          </MarkerClusterGroup>\r\n\r\n        </Map>\r\n    );\r\n  }\r\n\r\n  drawIssueMarkers(issueMarkers){\r\n    return (\r\n      issueMarkers.map((item,index) => {\r\n        return(\r\n          <Marker position={item.geometry.coordinates} key={index} icon={VenueLocationIcon} >\r\n            <Popup>{item.properties.name + ' ' + item.properties.date}</Popup>\r\n          </Marker>\r\n        )\r\n      })\r\n    );\r\n  }\r\n\r\n  drawMapObjects(objects){\r\n    console.log(objects)\r\n    return(\r\n      objects.map((item, index) => {\r\n        try{\r\n          if(!this.props.filters.includes(item.metadata.type.id)){\r\n            return null;\r\n          }\r\n\r\n          var parse = require('wellknown')\r\n          const geoJSON = parse(item.geometri.wkt)\r\n          if(geoJSON.type === 'Point'){\r\n            const point = [geoJSON['coordinates'][0], geoJSON['coordinates'][1]]\r\n            let icon = VenueLocationIcon;\r\n            return (\r\n              <Marker position={point} key={index} icon={this.getIcon(item.metadata.type.id)} onClick={this.props.handleMarkerClick} >\r\n              </Marker>\r\n            );\r\n          } else if(geoJSON.type === 'LineString') {\r\n            let latLngList = Array.from(geoJSON.coordinates.map(coords => (coords.slice(0,2))));\r\n            return (\r\n              <Polyline color='red' positions= {latLngList} key={index}>\r\n              </Polyline>\r\n            );\r\n          } else if(geoJSON.type === 'Polygon') {\r\n            let latLngList = geoJSON.coordinates;\r\n            return (\r\n              <Polygon color='red' positions= {latLngList} key={index}>\r\n              </Polygon>\r\n            );\r\n          } else {\r\n            console.log('Invalid geoJSON: ' + geoJSON.type);\r\n            console.log(geoJSON);\r\n            return null;\r\n          }\r\n  \r\n        } catch(err) {\r\n            console.log(item);\r\n            console.log(err)\r\n            return null;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  drawRoads(objects){\r\n    console.log(objects)\r\n    var parse = require('wellknown')\r\n    return(\r\n      objects.map((item,index) => {\r\n        const geoJSON = parse(item.geometri.wkt)\r\n\r\n        let latLngList = Array.from(geoJSON.coordinates.map(coords => (coords.slice(0,2))));\r\n        return (\r\n          <Polyline color='red' positions= {latLngList} key={index}>\r\n              </Polyline>\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getIcon(id){\r\n    const icons = {79: RedMarker, 83: VenueLocationIcon, 87: VenueLocationIcon}\r\n    return icons[id];\r\n  }\r\n\r\n  handleClick(event) {\r\n    this.props.onClick(event)\r\n  }\r\n}\r\n\r\nexport default MapView;\r\n","import React, { Component } from 'react';\r\n\r\nclass CaseRegistration extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            type: '',\r\n            date: '',\r\n            latitude: this.props.point.lat,\r\n            longitude: this.props.point.lng,\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            this.props.show ? \r\n                <div className='caseRegistration'>\r\n                    <form className='caseRegistration-form' onSubmit={this.handleSubmit}>\r\n                        <label className='caseRegistration-form-label'>\r\n                            Sakstype\r\n                            <input\r\n                                name='type'\r\n                                type='text' \r\n                                className='caseRegistration-form-input'\r\n                                value={this.state.type} \r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </label>\r\n                        <label className='caseRegistration-form-label'>\r\n                            Dato\r\n                            <input\r\n                                name='date' \r\n                                type='text' \r\n                                className='caseRegistration-form-input'\r\n                                value={this.state.date} \r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </label>\r\n                        <label className='caseRegistration-form-label'>\r\n                            Sted\r\n                            <input \r\n                                name='latitude'\r\n                                type='text' \r\n                                className='caseRegistration-form-input' \r\n                                value={this.state.latitude}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                            <input\r\n                                name='longitude'\r\n                                type='text'\r\n                                className='caseRegistration-form-input' \r\n                                value={this.state.longitude}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </label>\r\n                        <input type='submit' className='caseRegistration-form-input'></input>\r\n                    </form>\r\n                </div>\r\n                : \r\n                <div></div>\r\n        )\r\n    }\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(event){\r\n        let newIssue = {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [this.state.latitude, this.state.longitude]\r\n            },\r\n            properties: {\r\n                name: this.state.type,\r\n                date: this.state.date\r\n            }\r\n        }\r\n\r\n        this.props.handleRegistration(newIssue);\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\nexport default CaseRegistration;\r\n\r\n","import React, { Component } from 'react';\r\nimport CaseRegistration from './CaseRegistration';\r\n\r\nclass Menu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mainMenu: true,\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        // Any time props.email changes, update state.\r\n        if (nextProps.caseRegistration !== this.props.caseRegistration) {\r\n          this.setState({\r\n            caseRegistration: nextProps.caseRegistration\r\n          });\r\n        }\r\n      }\r\n\r\n    render(){\r\n        return(\r\n            <div className='Menu'>\r\n                {this.state.mainMenu && \r\n                    <div className='main-menu'>\r\n                        <header>Hoved Meny</header>\r\n                        <button>Registrer objekt</button>\r\n                        <button onClick={() => {this.setState((prevstate) => ({caseRegistration: !prevstate.caseRegistration}))}}>Registrer sak</button>\r\n                    </div>\r\n                }\r\n                <CaseRegistration show={this.state.caseRegistration} point={this.props.latlng} handleRegistration={this.props.handleRegistration}/>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\r\n\r\n/**\r\n * Dropdown list component.\r\n * properties:\r\n * title: header of the list\r\n * list: items to put in the dropdown list\r\n * selected: currently selected items\r\n * addFilter: function for handling adding of a filter\r\n * removeFilter: function for handling removing a filter\r\n */\r\nclass DropDown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            listOpen: false,\r\n            headerTitle: this.props.title,\r\n            list: this.props.list,\r\n            selected: this.props.selected,\r\n        }\r\n    }\r\n\r\n    toggleList(){\r\n        this.setState(prevState => ({\r\n          listOpen: !prevState.listOpen\r\n        }));\r\n    }\r\n\r\n    addFilter(filter){\r\n        this.setState(prevState => {\r\n            this.props.addFilter(filter);\r\n            return {selected: prevState.selected.concat(filter)}\r\n        });\r\n    }\r\n\r\n    removeFilter(filter){\r\n        this.setState(prevState => {\r\n            this.props.removeFilter(filter);\r\n            return {selected: prevState.selected.filter((i) => i !== filter)}\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const{list} = this.props\r\n        const{listOpen, headerTitle} = this.state\r\n\r\n        //console.log(this.props.selected)\r\n        //console.log('---')\r\n        //console.log(this.state.selected)\r\n        \r\n\r\n        return(\r\n            <div className=\"dd-wrapper\">\r\n                <div className=\"dd-header\" onClick={() => this.toggleList()}>\r\n\r\n                    {this.state.selected.length ?\r\n                    this.state.selected.map((item) =>(\r\n                        <div className='test' key={item.nummer}>{item.navn}<button className='removeFilter' onClick={() => this.removeFilter(item)}>X</button></div>\r\n                    ))\r\n                    :\r\n                    <div className=\"dd-header-title\">{headerTitle}</div>\r\n                    }\r\n                </div>\r\n                {listOpen && <ul className=\"dd-list\">\r\n                    {list.map((item) => (\r\n                        <li className=\"dd-list-item\" key={item.nummer} onClick={() => this.addFilter(item)} >{item.navn}</li>\r\n                    ))}\r\n                </ul>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DropDown;\r\n","import React, { Component } from 'react';\r\nimport DropDown from './DropDown';\r\n\r\nclass MapFilter extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            expanded: false,\r\n            height: '40px',\r\n            width: '40px',\r\n            municipalities: [],\r\n            roadObjects: [],\r\n        }\r\n        this.toggleWindow = this.toggleWindow.bind(this);\r\n        this.addFilter = this.addFilter.bind(this);\r\n        this.removeFilter = this.removeFilter.bind(this);\r\n    }\r\n\r\n    toggleWindow() {\r\n        if(this.state.expanded){\r\n            this.setState({height: '40px', width: '40px'});\r\n        } else {\r\n            this.setState({height: '500px', width: '200px'});\r\n        }\r\n\r\n        this.setState(prevState => ({\r\n            expanded: !prevState.expanded\r\n          }));\r\n    }\r\n\r\n    addFilter(item){\r\n        this.setState(prevState => {\r\n            this.props.handleFilters(prevState.roadObjects.concat(item.nummer));\r\n            return{roadObjects: prevState.roadObjects.concat(item.nummer)};  \r\n        });\r\n        \r\n    }\r\n\r\n    removeFilter(item){\r\n        this.setState(prevState => {\r\n            this.props.handleFilters(prevState.roadObjects.filter((i) => i !== item.nummer));\r\n            return{roadObjects: prevState.roadObjects.filter((i) => i !== item.nummer)};\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='mapfilter-container' style={{height: this.state.height, width: this.state.width}}>\r\n                {this.state.expanded && \r\n                <DropDown\r\n                    title='Velg vegobjekt'\r\n                    list={[{navn: 'Stikkrenne/kulvert', nummer: 79}, {navn: 'Kum', nummer: 83}, {navn: 'Belysningspunkt', nummer: 87}]}\r\n                    selected={this.state.roadObjects}\r\n                    addFilter={this.addFilter}\r\n                    removeFilter={this.removeFilter}\r\n                />}\r\n                <button className='mapfilter-toggle' onClick={this.toggleWindow}>{this.state.expanded ? '>' : '<'}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapFilter;","import React, { Component } from 'react';\r\n\r\nclass ContextMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render(){\r\n        let left = this.props.details.x + 'px';\r\n        let top = this.props.details.y + 'px';\r\n\r\n        return(\r\n            <div className='ContextMenu' style={{left,top}}>\r\n                <button onClick={this.props.handleClick}>Hendelse</button>\r\n                <button>Nytt objekt</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContextMenu;\r\n\r\n","import React, { Component } from 'react';\r\nimport MapView from './MapView';\r\nimport Menu from './Menu';\r\nimport MapFilter from './MapFilter';\r\nimport ContextMenu from './ContextMenu'\r\n\r\nclass Container extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n        contextMenu: {show: false},\r\n    }\r\n\r\n    this.swiping = false;\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleContextClick = this.handleContextClick.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div \r\n        className=\"Container\" \r\n        onMouseDown={() => {this.swiping = false}} \r\n        onMouseMove={() => {this.swiping = true}} \r\n\r\n      >\r\n        <Menu \r\n          issueRegistration={this.state.issueRegistration} \r\n          latlng={{lat: this.state.contextMenu.lat, lng: this.state.contextMenu.lng}}\r\n          handleRegistration={this.props.handleRegistration}\r\n        />\r\n\r\n        {this.state.contextMenu.show && <ContextMenu details={this.state.contextMenu} handleClick={this.handleContextClick}/>} \r\n\r\n        <MapView\r\n          currentLocation={this.props.currentLocation}\r\n          map= {this.props.map}\r\n          filters= {this.props.filters}\r\n          roads={this.props.roads}\r\n          issues={this.props.issues}\r\n          onClick={this.handleClick}\r\n        />\r\n        <MapFilter\r\n          data={this.state.menu}\r\n          handleFilters={this.props.handleFilters}\r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleClick(event){\r\n    const origin = event.originalEvent;\r\n    if(origin.target.classList.contains('leaflet-container') && !this.state.contextMenu.show && !this.swiping){\r\n        this.setState({contextMenu: {show: true, x: origin.pageX, y: origin.pageY,  lat: event.latlng.lat, lng: event.latlng.lng}})    \r\n    } else if(!origin.target.classList.contains('ContextMenu')) {\r\n        this.setState({contextMenu: {show: false}});\r\n    }\r\n\r\n    this.props.testRoadSelect(event.latlng.lat, event.latlng.lng)\r\n  }\r\n\r\n  handleContextClick(){\r\n    \r\n    this.setState(prevState => (\r\n      {issueRegistration: true, contextMenu: {show: false, lat: prevState.contextMenu.lat, lng: prevState.contextMenu.lng}}\r\n    ));\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ApiGateway from './ApiGateway'\r\nimport Container from './components/Container'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      nvdbEndpoint: 'https://nvdbapiles-v3.utv.atlas.vegvesen.no/',\r\n      currentLocation: { lat: 60.0084857, lng:11.0648648 },\r\n      menu: 'mainMenu',\r\n      map: [],\r\n      filters: [],\r\n      roads: [],\r\n      issues: [],\r\n      filterOnRoad: false,\r\n    }\r\n\r\n    this.nvdb = new ApiGateway(this.state.nvdbEndpoint)\r\n\r\n\r\n    //bind functions that need a reference to this instance\r\n    this.handleFilters = this.handleFilters.bind(this);\r\n    this.getUserLocation = this.getUserLocation.bind(this);\r\n    this.testRoadSelect = this.testRoadSelect.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(this.getUserLocation)\r\n    this.getIssues();\r\n    this.testApiSkriv();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container \r\n        currentLocation={this.state.currentLocation}\r\n        map= {this.state.map}\r\n        filters= {this.state.filters}\r\n        roads={this.state.roads}\r\n        issues={this.state.issues}\r\n        handleFilters={this.handleFilters}\r\n        handleRegistration={this.handleRegistration}\r\n        testRoadSelect={this.testRoadSelect}\r\n      />\r\n    );\r\n  }\r\n\r\n  getPolygonString(polygon) {\r\n    let result = '';\r\n    polygon.forEach(point => {\r\n      result = result + point.lat + ' ' + point.lng + ',';\r\n    });\r\n    return result.slice(0, -1);\r\n  }\r\n\r\n  /**\r\n   * Returns a collection of lat,lng points that form a circle around center\r\n   * @param {center point of circle in lat,lng} center \r\n   * @param {radius of circle in km} radius \r\n   * @param {how many points on the circle to return} verts \r\n   */\r\n  getCircle(center, radius=5, verts=10){\r\n    let headings = [];\r\n    let low = 0;\r\n    let step = (2*Math.PI - low) / verts;\r\n\r\n    for (let index = 0; index < verts; index++) {\r\n      headings.push(low);\r\n      low += step;\r\n    }\r\n\r\n    radius = radius / 6371;\r\n    center = {lat: center.lat*(Math.PI/180), lng: center.lng*(Math.PI/180)}\r\n    let points = []\r\n\r\n    headings.forEach(heading => {\r\n      let lng;\r\n      let lat = Math.asin(Math.sin(center.lat)*Math.cos(radius)+Math.cos(center.lat)*Math.sin(radius)*Math.cos(heading));\r\n\r\n      if(Math.cos(lat) === 0){\r\n        lng = center.lng;\r\n      } else {\r\n        lng = ((center.lng-Math.asin(Math.sin(heading)*Math.sin(radius)/Math.cos(lat))+Math.PI)%(2*Math.PI))-Math.PI;\r\n      }\r\n      points.push({lat: lat*(180/Math.PI), lng: lng*(180/Math.PI)})\r\n    });\r\n\r\n    points.push(points[0]);\r\n    return points;\r\n  }\r\n\r\n  getUserLocation(position){\r\n    this.setState({currentLocation: {lat: position.coords.latitude, lng: position.coords.longitude}})\r\n  }\r\n\r\n  //TODO\r\n  async handleFilters(filters) {\r\n    let promises = [];\r\n    this.setState({filters: filters})\r\n\r\n    if(this.state.filterOnRoad){\r\n      const roadId = this.state.filterOnRoad;\r\n      console.log(roadId);\r\n      if(filters){\r\n        filters.forEach(async(element) => {\r\n          promises.push(this.nvdb.apiCall('vegobjekter/' + element + '?inkluder=alle&srid=4326&veglenkesekvens=' + roadId));\r\n        });\r\n        Promise.all(promises).then((values) => {\r\n          this.setState({map: [].concat.apply([], values)});\r\n        });\r\n      }\r\n    } else {\r\n      const poly = this.getPolygonString(this.getCircle(this.state.currentLocation))\r\n\r\n      if(filters){\r\n        filters.forEach(async(element) => {\r\n          promises.push(this.nvdb.apiCall('vegobjekter/' + element + '?inkluder=alle&srid=4326&polygon=' + poly));\r\n        });\r\n        Promise.all(promises).then((values) => {\r\n          this.setState({map: [].concat.apply([], values)});\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  async handleRegistration(issues){\r\n    const response = await axios.post('/api/registerIssue', issues);\r\n\r\n    if (response.status !== 200) throw Error(response);\r\n  }\r\n\r\n  async getIssues(){\r\n    const response = await axios.get('/api/getIssues');\r\n    this.setState({issues: response.data})\r\n  }\r\n\r\n  async testRoadSelect(lat, lng) {\r\n    axios.get(this.state.nvdbEndpoint + 'posisjon?lat=' + lat + '&lon=' + lng + '&srid=4326' + '&maks_avstand=200').then(value => {\r\n      axios.get(this.state.nvdbEndpoint + 'vegnett/veglenkesekvenser/' + value.data[0].veglenkesekvens.veglenkesekvensid + '?srid=4326').then(value2 => {\r\n        this.setState({\r\n          roads: value2.data.veglenker,\r\n          filterOnRoad: value.data[0].veglenkesekvens.veglenkesekvensid\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  async testApiSkriv(){\r\n    const response = await axios.post('http://localhost:8010/ws/no/vegvesen/ikt/sikkerhet/aaa/autentiser', {'username': 'bjosor', 'password': 'bjosor'}, {headers: { 'Content-Type': 'application/json'}});\r\n    console.log(response)\r\n    \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}